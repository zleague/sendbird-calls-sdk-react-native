{"version":3,"sources":["JSEventEmitter.ts"],"names":["val","createUniqueKey","JSEventEmitter","getListenerPool","event","eventPool","addListener","listener","uniqKey","listenerPool","emit","args","setTimeout","listeners","Object","values","forEach","e","Logger","warn"],"mappings":";;;;;;;AAAA;;;;AAKA,IAAIA,GAAG,GAAG,CAAV;;AACA,SAASC,eAAT,GAA2B;AACzB,SAAOD,GAAG,EAAV;AACD;;AAEc,MAAME,cAAN,CAAqB;AAAA;AAAA,uCACgB,EADhB;AAAA;;AAE1BC,EAAAA,eAAe,CAACC,KAAD,EAAgB;AACrC,QAAI,CAAC,KAAKC,SAAL,CAAeD,KAAf,CAAL,EAA4B,KAAKC,SAAL,CAAeD,KAAf,IAAwB,EAAxB;AAC5B,WAAO,KAAKC,SAAL,CAAeD,KAAf,CAAP;AACD;;AAEDE,EAAAA,WAAW,CAACF,KAAD,EAAgBG,QAAhB,EAAoC;AAC7C,UAAMC,OAAO,GAAGP,eAAe,EAA/B;AACA,UAAMQ,YAAY,GAAG,KAAKN,eAAL,CAAqBC,KAArB,CAArB;AAEAK,IAAAA,YAAY,CAACD,OAAD,CAAZ,GAAwBD,QAAxB;AAEA,WAAO,MAAM;AACX,aAAOE,YAAY,CAACD,OAAD,CAAnB;AACD,KAFD;AAGD;;AAEDE,EAAAA,IAAI,CAACN,KAAD,EAAoC;AAAA,sCAAjBO,IAAiB;AAAjBA,MAAAA,IAAiB;AAAA;;AACtCC,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMH,YAAY,GAAG,KAAKN,eAAL,CAAqBC,KAArB,CAArB;AACA,YAAMS,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAwBN,YAAxB,CAAlB;AACAI,MAAAA,SAAS,CAACG,OAAV,CAAmBT,QAAD,IAAc;AAC9B,YAAI;AACFA,UAAAA,QAAQ,CAAC,GAAGI,IAAJ,CAAR;AACD,SAFD,CAEE,OAAOM,CAAP,EAAU;AACVC,yBAAOC,IAAP,CAAY,kBAAZ,EAAgCF,CAAhC;AACD;AACF,OAND;AAOD,KAVS,EAUP,CAVO,CAAV;AAWD;;AA9BiC","sourcesContent":["import { Logger } from '../utils/logger';\n\ntype Listener = (...args: unknown[]) => void;\ntype ListenerPool = Record<number, Listener>;\n\nlet val = 0;\nfunction createUniqueKey() {\n  return val++;\n}\n\nexport default class JSEventEmitter {\n  private eventPool: Record<string, ListenerPool> = {};\n  private getListenerPool(event: string) {\n    if (!this.eventPool[event]) this.eventPool[event] = {};\n    return this.eventPool[event];\n  }\n\n  addListener(event: string, listener: Listener) {\n    const uniqKey = createUniqueKey();\n    const listenerPool = this.getListenerPool(event);\n\n    listenerPool[uniqKey] = listener;\n\n    return () => {\n      delete listenerPool[uniqKey];\n    };\n  }\n\n  emit(event: string, ...args: unknown[]) {\n    setTimeout(() => {\n      const listenerPool = this.getListenerPool(event);\n      const listeners = Object.values<Listener>(listenerPool);\n      listeners.forEach((listener) => {\n        try {\n          listener(...args);\n        } catch (e) {\n          Logger.warn('[JSEventEmitter]', e);\n        }\n      });\n    }, 0);\n  }\n}\n"]}