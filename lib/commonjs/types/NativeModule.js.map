{"version":3,"sources":["NativeModule.ts"],"names":["ControllableModuleType"],"mappings":";;;;;;AAkBA;IAgDYA,sB;;;WAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;GAAAA,sB,sCAAAA,sB","sourcesContent":["import type { NativeModule, TurboModule } from 'react-native';\n\nimport { BridgedQuery } from '../libs/BridgedQuery';\nimport type { CallOptions, DirectCallLog, DirectCallProperties, SendbirdCallListener } from './Call';\nimport type { AudioDevice, VideoDevice } from './Media';\nimport { SoundType } from './Media';\nimport {\n  DirectCallLogQueryParams,\n  NativeQueryCreator,\n  NativeQueryKey,\n  NativeQueryResult,\n  NativeQueryType,\n  RoomListQueryParams,\n} from './Query';\nimport type { EnterParams, RoomParams, RoomProperties } from './Room';\nimport type { AuthenticateParams, User } from './User';\nimport type { AsJSInterface, AsJSMediaDeviceControl } from './index';\n\n// --------------- Native interfaces ---------------\n\ntype NativeModuleInterface = NativeModule & TurboModule;\n\nexport type NativeConstants = {\n  NATIVE_SDK_VERSION: string;\n};\n\nexport interface NativeCommonModule {\n  applicationId: string;\n  currentUser: User | null;\n\n  addDirectCallSound(type: SoundType, fileName: string): void;\n  removeDirectCallSound(type: SoundType): void;\n  setDirectCallDialingSoundOnWhenSilentOrVibrateMode(enabled: boolean): void;\n\n  getCurrentUser(): Promise<User | null>;\n  getOngoingCalls(): Promise<DirectCallProperties[]>;\n  getDirectCall(callId: string): Promise<DirectCallProperties>;\n\n  initialize(appId: string): boolean;\n  authenticate(authParams: AuthenticateParams): Promise<User>;\n  deauthenticate(): Promise<void>;\n  registerPushToken(token: string, unique?: boolean): Promise<void>;\n  unregisterPushToken(token: string): Promise<void>;\n  dial(calleeUserId: string, isVideoCall: boolean, options: CallOptions): Promise<DirectCallProperties>;\n  createRoom(roomParams: RoomParams): Promise<RoomProperties>;\n  fetchRoomById(roomId: string): Promise<RoomProperties>;\n  getCachedRoomById(roomId: string): Promise<RoomProperties | null>;\n\n  /** @platform Android **/\n  handleFirebaseMessageData(data: Record<string, string>): void;\n\n  /** @platform iOS **/\n  registerVoIPPushToken(token: string, unique?: boolean): Promise<void>;\n  /** @platform iOS **/\n  unregisterVoIPPushToken(token: string): Promise<void>;\n  /** @platform iOS **/\n  routePickerView(): void;\n\n  // unregisterAllPushTokens(): Promise<void>;\n  // addRecordingListener\n  // removeRecordingListener\n  // removeAllRecordingListeners\n}\n\ntype CommonModule_AndroidSpecificKeys = 'handleFirebaseMessageData';\ntype CommonModule_IOSSpecificKeys = 'registerVoIPPushToken' | 'unregisterVoIPPushToken' | 'routePickerView';\nexport enum ControllableModuleType {\n  DIRECT_CALL = 'DIRECT_CALL',\n  GROUP_CALL = 'GROUP_CALL',\n}\n\nexport type JSMediaDeviceControl = AsJSMediaDeviceControl<NativeMediaDeviceControl>;\nexport interface NativeMediaDeviceControl {\n  muteMicrophone(type: ControllableModuleType, identifier: string): void;\n  unmuteMicrophone(type: ControllableModuleType, identifier: string): void;\n  stopVideo(type: ControllableModuleType, identifier: string): void;\n  startVideo(type: ControllableModuleType, identifier: string): void;\n  switchCamera(type: ControllableModuleType, identifier: string): Promise<void>;\n  selectVideoDevice(type: ControllableModuleType, identifier: string, device: VideoDevice): Promise<void>;\n  /** @platform Android **/\n  selectAudioDevice(type: ControllableModuleType, identifier: string, device: AudioDevice): Promise<void>;\n}\n\nexport interface NativeDirectCallModule {\n  accept(callId: string, options: CallOptions, holdActiveCall: boolean): Promise<void>;\n  end(callId: string): Promise<void>;\n  updateLocalVideoView(callId: string, videoViewId: number): void;\n  updateRemoteVideoView(callId: string, videoViewId: number): void;\n\n  /** Not implemented yet belows **/\n  // hold(callId:string): Promise<void>;\n  // unhold(callId:string, force: boolean): Promise<void>;\n  //\n  // captureLocalVideoView(callId:string): Promise<string>; // capture -> tmp file path\n  // captureRemoteVideoView(callId:string): Promise<string>;\n  // updateCustomItems(callId:string, items: Record<string, string>): Promise<CustomItemUpdateResult>;\n  // deleteAllCustomItems(callId:string): Promise<void>;\n  // deleteCustomItems(callId:string, key: string[]): Promise<CustomItemUpdateResult>;\n  //\n  // startRecording(callId:string, options: RecordingOptions): Promise<{ recordingId: string }>;\n  // stopRecording(callId:string, recordingId: string): void;\n  //\n  // startScreenShare(callId:string): Promise<void>;\n  // stopScreenShare(callId:string): Promise<void>;\n}\n\nexport interface NativeGroupCallModule {\n  enter(roomId: string, options: EnterParams): Promise<void>;\n  exit(roomId: string): void;\n}\n\nexport interface NativeQueries {\n  createDirectCallLogListQuery: NativeQueryCreator<DirectCallLogQueryParams>;\n  createRoomListQuery: NativeQueryCreator<RoomListQueryParams>;\n  queryNext<T extends NativeQueryType>(\n    key: NativeQueryKey,\n    type: T,\n  ): NativeQueryResult<T extends NativeQueryType.DIRECT_CALL_LOG ? DirectCallLog : RoomProperties>;\n  queryRelease(key: NativeQueryKey): void;\n}\n\nexport interface SendbirdCallsNativeSpec\n  extends NativeModuleInterface,\n    NativeQueries,\n    NativeCommonModule,\n    NativeDirectCallModule,\n    NativeGroupCallModule,\n    NativeMediaDeviceControl {}\n\n// --------------- Javascript interfaces ---------------\n\ntype PlatformSpecificInterface = AsJSInterface<\n  AsJSInterface<NativeCommonModule, 'ios', CommonModule_IOSSpecificKeys>,\n  'android',\n  CommonModule_AndroidSpecificKeys\n>;\n\nexport interface SendbirdCallsJavascriptSpec extends PlatformSpecificInterface {\n  /** Listeners **/\n  setListener(listener: SendbirdCallListener): void;\n\n  /** Queries **/\n  createDirectCallLogListQuery(\n    params: DirectCallLogQueryParams,\n  ): Promise<BridgedQuery<NativeQueryType.DIRECT_CALL_LOG>>;\n  createRoomListQuery(params: RoomListQueryParams): Promise<BridgedQuery<NativeQueryType.ROOM_LIST>>;\n}\n"]}