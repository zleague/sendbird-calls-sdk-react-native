{"version":3,"sources":["Call.ts"],"names":["DirectCallEndResult","DirectCallUserRole"],"mappings":"AA+UA;AAiDA,WAAYA,mBAAZ;;WAAYA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;AAAAA,EAAAA,mB;GAAAA,mB,KAAAA,mB;;AAmCZ,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["import type { AudioDevice, AudioDeviceChangedInfo, RecordingStatus, VideoDevice } from './Media';\nimport type { NativeDirectCallModule } from './NativeModule';\nimport { JSMediaDeviceControl } from './NativeModule';\nimport type { User } from './User';\nimport type { AsJSDirectCall, AsJSInterface } from './index';\n\nexport interface SendbirdCallListener {\n  /**\n   * Called when received dialing.\n   *\n   * @since 1.0.0\n   */\n  onRinging: (call: DirectCallProperties) => void;\n}\n\nexport interface DirectCallListener {\n  /**\n   * Called when the update properties internally on Javascript side\n   *\n   * @platform Javascript\n   * @since 1.0.0\n   */\n  onPropertyUpdatedManually: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the callee has accepted the call, but not yet connected to media streams.\n   *\n   * @since 1.0.0\n   */\n  onEstablished: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when media streams between the caller and callee are connected and audio/video is enabled.\n   *\n   * @since 1.0.0\n   */\n  onConnected: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when DirectCall begins attempting to reconnect to the server after losing connection.\n   *\n   * @since 1.0.0\n   */\n  onReconnecting: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when DirectCall successfully reconnects to the server.\n   *\n   * @since 1.0.0\n   */\n  onReconnected: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the call has ended.\n   *\n   * @since 1.0.0\n   */\n  onEnded: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the remote user changes audio settings.\n   *\n   * @since 1.0.0\n   */\n  onRemoteAudioSettingsChanged: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the remote user changes video settings.\n   *\n   * @since 1.0.0\n   *  **/\n  onRemoteVideoSettingsChanged: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the local user changes audio settings.\n   *\n   * @platform Android\n   * @since 1.0.0\n   */\n  onLocalVideoSettingsChanged: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the other user’s recording status is changed.\n   * You can check the recording status of the other user with {@link DirectCall.remoteRecordingStatus}\n   *\n   * @since 1.0.0\n   */\n  onRemoteRecordingStatusChanged: (call: DirectCallProperties) => void;\n\n  /**\n   * Called when the audio device has been changed.\n   *\n   * on iOS, if you want to change the audio device you should handle the native side. (Currently, only port names are supported as strings)\n   * See also: AVAudioSession.setPreferredInput {@link https://developer.apple.com/documentation/avfaudio/avaudiosession/1616491-setpreferredinput}\n   * See also: AVRoutePickerView {@link https://developer.apple.com/documentation/avkit/avroutepickerview}\n   *\n   * @since 1.0.0\n   */\n  onAudioDeviceChanged: (call: DirectCallProperties, info: AudioDeviceChangedInfo) => void;\n\n  /**\n   *  Called when the custom items of the call are updated.\n   *\n   * @since 1.0.0\n   */\n  onCustomItemsUpdated: (call: DirectCallProperties, updatedKeys: string[]) => void;\n\n  /**\n   * Called when the custom items of the call are deleted.\n   *\n   * @since 1.0.0\n   */\n  onCustomItemsDeleted: (call: DirectCallProperties, deletedKeys: string[]) => void;\n\n  /**\n   * The local or remote user has put a call on hold or removed a hold from a call and their hold status has changed.\n   * @param {DirectCall} call DirectCall that has updated user hold status\n   * @param {boolean} isLocalUser Returns true if the user whose hold status changed is local user\n   * @param {boolean} isUserOnHold Returns true if the user's hold status is changed to on hold\n   *\n   * @since 1.0.0\n   */\n  onUserHoldStatusChanged: (call: DirectCallProperties, isLocalUser: boolean, isUserOnHold: boolean) => void;\n}\n\nexport interface DirectCallProperties {\n  /**\n   * Gets call ID.\n   *\n   * @since 1.0.0\n   */\n  callId: string;\n\n  /**\n   * The UUID form of callId. Useful when dealing with CallKit.\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  ios_callUUID: string | null;\n\n  /**\n   * Gets call log.\n   *\n   * @since 1.0.0\n   */\n  callLog: DirectCallLog | null;\n\n  /**\n   * Gets callee.\n   *\n   * @since 1.0.0\n   */\n  callee: DirectCallUser | null;\n\n  /**\n   * Gets caller.\n   *\n   * @since 1.0.0\n   */\n  caller: DirectCallUser | null;\n\n  /**\n   * Gets ender.\n   *\n   * @since 1.0.0\n   */\n  endedBy: DirectCallUser | null;\n\n  /**\n   * Gets custom items of this {@link DirectCall} instance.\n   *\n   * @since 1.0.0\n   */\n  customItems: Record<string, string>;\n\n  /**\n   * Gets call startedAt timestamp.\n   *\n   * @since 1.0.0\n   */\n  startedAt: number;\n\n  /**\n   * Gets call duration(ms).\n   *\n   * @since 1.0.0\n   */\n  duration: number;\n\n  /**\n   * Gets end result.\n   *\n   * @since 1.0.0\n   */\n  endResult: DirectCallEndResult;\n\n  /**\n   * Gets local user.\n   *\n   * @since 1.0.0\n   */\n  localUser: DirectCallUser | null;\n\n  /**\n   * Gets remote user.\n   *\n   * @since 1.0.0\n   */\n  remoteUser: DirectCallUser | null;\n\n  /**\n   * Gets my role.\n   *\n   * @since 1.0.0\n   */\n  myRole: DirectCallUserRole | null;\n\n  /**\n   * Gets available video devices.\n   * List of available {@link VideoDevice}.\n   *\n   * @since 1.0.0\n   */\n  availableVideoDevices: VideoDevice[];\n\n  /**\n   * Gets current video device.\n   *\n   * @since 1.0.0\n   */\n  currentVideoDevice: VideoDevice | null;\n\n  /**\n   * Gets available audio devices.\n   *\n   * @platform Android\n   * @since 1.0.0\n   */\n  android_availableAudioDevices: AudioDevice[];\n\n  /**\n   * Gets current audio device.\n   *\n   * @platform Android\n   * @since 1.0.0\n   */\n  android_currentAudioDevice: AudioDevice | null;\n\n  /**\n   * Is ended.\n   * True if call is ended. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isEnded: boolean;\n\n  /**\n   * Indicates whether the call is on hold by either a callee or a caller, or by both.\n   * True if the {@link DirectCall} is on hold. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isOnHold: boolean;\n\n  /**\n   * Is ongoing.\n   * True if call is ongoing. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isOngoing: boolean;\n  /**\n   * Is video call.\n   *\n   * @return True if video call. Otherwise, false.\n   * @since 1.0.0\n   */\n  isVideoCall: boolean;\n\n  /**\n   * Indicates whether the local user's screen is being shared.\n   * True if the local user's screen is being shared. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isLocalScreenShareEnabled: boolean;\n\n  /**\n   * Is local audio enabled.\n   * True if local audio is enabled. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isLocalAudioEnabled: boolean;\n\n  /**\n   * Is local video enabled.\n   * True if local video is enabled. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isLocalVideoEnabled: boolean;\n\n  /**\n   * Is remote audio enabled.\n   * True if remote audio is enabled. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isRemoteAudioEnabled: boolean;\n\n  /**\n   * Is remote video enabled.\n   * True if remote video is enabled. Otherwise, false.\n   *\n   * @since 1.0.0\n   */\n  isRemoteVideoEnabled: boolean;\n\n  /**\n   * Gets local recording status.\n   *\n   * @since 1.0.0\n   */\n  localRecordingStatus: RecordingStatus;\n\n  /**\n   * Gets remote recording status.\n   *\n   * @since 1.0.0\n   */\n  remoteRecordingStatus: RecordingStatus;\n}\n\n/** DirectCall */\ntype JSDirectCallModule = AsJSDirectCall<NativeDirectCallModule>;\ntype JSDirectCallMediaDeviceControl = AsJSInterface<JSMediaDeviceControl, 'android', 'selectAudioDevice'>;\n\nexport interface DirectCallMethods extends JSDirectCallModule, JSDirectCallMediaDeviceControl {\n  addListener(listener: Partial<DirectCallListener>): () => void;\n}\n\nexport interface DirectCallLog {\n  startedAt: number;\n  endedAt: number;\n  duration: number;\n\n  callId: string;\n  isFromServer: boolean;\n  isVideoCall: boolean;\n  customItems: Record<string, string>;\n  endResult: DirectCallEndResult;\n\n  myRole: DirectCallUserRole;\n  callee: DirectCallUser | null;\n  caller: DirectCallUser | null;\n  endedBy: DirectCallUser | null;\n}\n\nexport interface DirectCallUser extends User {\n  role: DirectCallUserRole;\n}\n\nexport type CustomItemUpdateResult = {\n  updatedItems: Record<string, string>;\n  affectedKeys: string[];\n};\n\nexport type CallOptions = {\n  localVideoViewId?: number;\n  remoteVideoViewId?: number;\n\n  /** For SendbirdChat integration **/\n  channelUrl?: string;\n\n  /** @default true */\n  audioEnabled?: boolean;\n  /** @default true */\n  videoEnabled?: boolean;\n  /** @default true */\n  frontCamera?: boolean;\n};\n\nexport enum DirectCallEndResult {\n  /** Default value of the EndResult. **/\n  NONE = 'NONE',\n\n  /** The call has ended by either the caller or callee after successful connection. **/\n  COMPLETED = 'COMPLETED',\n\n  /** The caller has canceled the call before the callee accepts or declines. **/\n  CANCELED = 'CANCELED',\n\n  /** The callee has declined the call. **/\n  DECLINED = 'DECLINED',\n\n  /** The call is accepted on one of the callee’s other devices. All the other devices will receive this call result. **/\n  OTHER_DEVICE_ACCEPTED = 'OTHER_DEVICE_ACCEPTED',\n\n  /** Sendbird server failed to establish a media session between the caller and callee within a specific period of time. **/\n  TIMED_OUT = 'TIMED_OUT',\n\n  /** Data streaming from either the caller or the callee has stopped due to a WebRTC connection issue while calling. **/\n  CONNECTION_LOST = 'CONNECTION_LOST',\n\n  /** The callee has not either accepted or declined the call for a specific period of time. **/\n  NO_ANSWER = 'NO_ANSWER',\n\n  /** The 'dial()' method of the call has failed. **/\n  DIAL_FAILED = 'DIAL_FAILED',\n\n  /** The 'accept()' method of the call has failed. **/\n  ACCEPT_FAILED = 'ACCEPT_FAILED',\n\n  /** Unknown **/\n  UNKNOWN = 'UNKNOWN',\n}\n\nexport enum DirectCallUserRole {\n  CALLER = 'CALLER',\n  CALLEE = 'CALLEE',\n}\n"]}