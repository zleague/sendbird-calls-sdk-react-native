{"version":3,"sources":["Query.ts"],"names":["NativeQueryType"],"mappings":"AAEA,WAAYA,eAAZ;;WAAYA,e;AAAAA,EAAAA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e","sourcesContent":["import type { DirectCallEndResult, DirectCallUserRole, RoomState, RoomType } from '../types';\n\nexport enum NativeQueryType {\n  DIRECT_CALL_LOG = 'DIRECT_CALL_LOG',\n  ROOM_LIST = 'ROOM_LIST',\n}\n\nexport interface Query {\n  release(): void;\n  next(): Promise<unknown>;\n  hasNext: boolean;\n  isLoading: boolean;\n}\n\nexport type NativeQueryKey = `native#${string}`;\n\nexport type NativeQueryCreator<QueryParams> = {\n  (params: QueryParams): Promise<NativeQueryKey>;\n};\n\nexport type DirectCallLogQueryParams = {\n  limit?: number;\n  myRole?: DirectCallUserRole | 'ALL';\n  endResults?: DirectCallEndResult[];\n};\n\nexport type RoomListQueryParams = {\n  limit?: number;\n  createdByUserIds?: string[];\n  roomIds?: string[];\n  state?: RoomState;\n  type?: RoomType;\n  createdAt?: Range;\n  currentParticipantCount?: Range;\n};\n\nexport type Range = {\n  upperBound?: number;\n  lowerBound?: number;\n};\n\nexport type NativeQueryResult<T> = Promise<{ hasNext: boolean; result: T[] }>;\n"]}