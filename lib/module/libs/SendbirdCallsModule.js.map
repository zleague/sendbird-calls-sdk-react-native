{"version":3,"sources":["SendbirdCallsModule.tsx"],"names":["Platform","pkg","NativeQueryType","RoomState","RoomType","Logger","DirectCallLogListQuery","RoomListQuery","DirectCall","CallsEvent","DefaultEventType","Room","SendbirdCallsModule","constructor","binder","nativeModule","getConstants","NATIVE_SDK_VERSION","type","fileName","name","OS","idx","lastIndexOf","slice","addDirectCallSound","removeDirectCallSound","enabled","setDirectCallDialingSoundOnWhenSilentOrVibrateMode","_currentUser","getCurrentUser","currentUser","callId","callProps","getDirectCall","get","appId","initialized","applicationId","_init","info","poolRelease","addListener","DEFAULT","data","ON_RINGING","_sendbirdCallListener","onRinging","initialize","_applicationId","_initialized","authParams","authenticate","deauthenticate","token","unique","registerPushToken","unregisterPushToken","registerVoIPPushToken","unregisterVoIPPushToken","routePickerView","handleFirebaseMessageData","params","queryKey","createDirectCallLogListQuery","DIRECT_CALL_LOG","createRoomListQuery","ROOM_LIST","VERSION","version","NATIVE_VERSION","getOngoingCalls","dial","calleeUserId","isVideoCall","options","audioEnabled","frontCamera","videoEnabled","createRoom","roomParams","then","props","fetchRoomById","roomId","getCachedRoomById","setListener","listener"],"mappings":"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","sourcesContent":["import { Platform } from 'react-native';\n\nimport pkg from '../../package.json';\nimport type {\n  AuthenticateParams,\n  CallOptions,\n  DirectCallLogQueryParams,\n  DirectCallProperties,\n  RoomListQueryParams,\n  RoomParams,\n  SendbirdCallListener,\n  SendbirdCallsJavascriptSpec,\n  User,\n} from '../types';\nimport { NativeConstants, NativeQueryType, RoomState, RoomType, SoundType } from '../types';\nimport { Logger } from '../utils/logger';\nimport { DirectCallLogListQuery, RoomListQuery } from './BridgedQuery';\nimport { DirectCall } from './DirectCall';\nimport NativeBinder, { CallsEvent, DefaultEventType } from './NativeBinder';\nimport { Room } from './Room';\n\n/**\n * SendbirdCallsModule class for SendbirdCalls\n */\nexport default class SendbirdCallsModule implements SendbirdCallsJavascriptSpec {\n  constructor(private binder: NativeBinder) {}\n\n  private _applicationId = '';\n  private _initialized = false;\n  private _currentUser: User | null = null;\n  private _sendbirdCallListener: SendbirdCallListener | null = null;\n\n  /**\n   * Returns current React-Native SDK version.\n   *\n   * @since 1.0.0\n   */\n  public get VERSION() {\n    return pkg.version;\n  }\n\n  /**\n   * Returns current iOS/Android SDK version.\n   *\n   * @since 1.0.0\n   */\n  public get NATIVE_VERSION() {\n    return this.getConstants()['NATIVE_SDK_VERSION'];\n  }\n\n  /**\n   * Returns the SDK Logger\n   *\n   * @since 1.0.0\n   */\n  public get Logger() {\n    return Logger;\n  }\n\n  /**\n   * Returns current application ID.\n   *\n   * @since 1.0.0\n   */\n  public get applicationId() {\n    return this._applicationId;\n  }\n\n  /**\n   * Returns is SDK initialized.\n   *\n   * @since 1.0.0\n   */\n  public get initialized() {\n    return this._initialized;\n  }\n\n  /**\n   * Gets the current `User`.\n   * Returns the current `User`. If SendbirdCalls is not authenticated, `null` will be returned.\n   *\n   * @since 1.0.0\n   */\n  public get currentUser() {\n    return this._currentUser;\n  }\n\n  /**\n   * An enum that represents different types of a room.\n   * Returns {@link RoomType}\n   *\n   * @since 1.0.0\n   */\n  public get RoomType() {\n    return RoomType;\n  }\n\n  /**\n   * An enum that represents state of a room.\n   * Returns {@link RoomState}\n   *\n   * @since 1.0.0\n   */\n  public get RoomState() {\n    return RoomState;\n  }\n\n  /**\n   * Gets the constants from React-Native Native module\n   * Returns the object\n   *\n   * @since 1.0.0\n   */\n  protected getConstants = (): NativeConstants => {\n    // @ts-ignore\n    return this.binder.nativeModule.getConstants?.() ?? { NATIVE_SDK_VERSION: '' };\n  };\n\n  /**\n   * Adds sound used in DirectCall such as ringtone and some sound effects with its file name with extension\n   *\n   * @iOS bundle file name\n   * @Android res/raw file name\n   *\n   * @since 1.0.0\n   */\n  public addDirectCallSound = (type: SoundType, fileName: string) => {\n    let name = fileName;\n    if (Platform.OS === 'android') {\n      const idx = fileName.lastIndexOf('.');\n      if (idx) name = fileName.slice(0, idx);\n    }\n    this.binder.nativeModule.addDirectCallSound(type, name);\n  };\n\n  /**\n   * Removes sound used in {@link DirectCall} with {@link SoundType} value.\n   *\n   * @since 1.0.0\n   */\n  public removeDirectCallSound = (type: SoundType) => {\n    this.binder.nativeModule.removeDirectCallSound(type);\n  };\n\n  /**\n   * Enables / disables dial sound used in {@link DirectCall} even when the device is in silent mode.\n   * Call this method right after {@link addDirectCallSound}.\n   *\n   * @since 1.0.0\n   */\n  public setDirectCallDialingSoundOnWhenSilentOrVibrateMode = (enabled: boolean) => {\n    this.binder.nativeModule.setDirectCallDialingSoundOnWhenSilentOrVibrateMode(enabled);\n  };\n\n  /**\n   * Gets the current `User` from native\n   * Returns the current `User`. If SendbirdCalls is not authenticated, `null` will be returned.\n   *\n   * @since 1.0.0\n   */\n  public getCurrentUser = async () => {\n    this._currentUser = await this.binder.nativeModule.getCurrentUser();\n    return this.currentUser;\n  };\n\n  /**\n   * Returns all ongoing calls, including the active call and all calls on hold.\n   *\n   * @since 1.0.0\n   */\n  public getOngoingCalls(): Promise<DirectCallProperties[]> {\n    return this.binder.nativeModule.getOngoingCalls();\n  }\n\n  /**\n   * Gets call from call ID or call UUID\n   *\n   * @since 1.0.0\n   */\n  public getDirectCall = async (callId: string): Promise<DirectCall> => {\n    const callProps = await this.binder.nativeModule.getDirectCall(callId);\n    return DirectCall.get(this.binder, callProps);\n  };\n\n  /**\n   * Initializes SendbirdCalls.\n   *\n   * @since 1.0.0\n   */\n  public initialize = (appId: string) => {\n    if (this.initialized) {\n      if (this.applicationId !== appId) {\n        return this._init(appId);\n      } else {\n        return this.initialized;\n      }\n    } else {\n      return this._init(appId);\n    }\n  };\n\n  private _init = (appId: string) => {\n    this.Logger.info('[SendbirdCalls]', 'initialize()');\n\n    DirectCall.poolRelease();\n    Room.poolRelease();\n\n    if (!this.initialized) {\n      this.binder.addListener(CallsEvent.DEFAULT, ({ type, data }) => {\n        if (type === DefaultEventType.ON_RINGING) {\n          this.Logger.info('[SendbirdCalls]', 'onRinging', data.callId);\n          this._sendbirdCallListener?.onRinging(data);\n        }\n      });\n    }\n\n    this.binder.nativeModule.initialize(appId);\n    this._applicationId = appId;\n    this._initialized = true;\n    return this.initialized;\n  };\n\n  /**\n   * Authenticates.\n   *\n   * @since 1.0.0\n   */\n  public authenticate = async (authParams: AuthenticateParams) => {\n    this._currentUser = await this.binder.nativeModule.authenticate(authParams);\n    return this.currentUser as User;\n  };\n\n  /**\n   * Deauthenticates.\n   *\n   * @since 1.0.0\n   */\n  public deauthenticate = async () => {\n    await this.binder.nativeModule.deauthenticate();\n    this._currentUser = null;\n  };\n\n  /**\n   * Registers push token for current user.\n   *\n   * on iOS, push token means APNS token.\n   * on Android, push token means FCM token.\n   *\n   * ```ts\n   * if (Platform.OS === 'android') {\n   *   const fcmToken = await messaging().getToken();\n   *   await SendbirdCalls.registerPushToken(fcmToken);\n   * }\n   * if (Platform.OS === 'ios') {\n   *   const apnsToken = await messaging().getAPNSToken();\n   *   await SendbirdCalls.registerPushToken(apnsToken);\n   * }\n   * ```\n   *\n   * @since 1.0.0\n   */\n  public registerPushToken = async (token: string, unique = true) => {\n    await this.binder.nativeModule.registerPushToken(token, unique);\n  };\n\n  /**\n   * Unregisters push token for current user.\n   *\n   * @since 1.0.0\n   */\n  public unregisterPushToken = async (token: string) => {\n    await this.binder.nativeModule.unregisterPushToken(token);\n  };\n\n  /**\n   * Makes a call to user(callee) directly. (1:1 Call).\n   * Use the {@link CallOptions} object to choose initial call configuration (e.g. muted/unmuted)\n   *\n   * @since 1.0.0\n   */\n  public dial(\n    calleeUserId: string,\n    isVideoCall: boolean,\n    options: CallOptions = { audioEnabled: true, frontCamera: true, videoEnabled: true },\n  ): Promise<DirectCallProperties> {\n    return this.binder.nativeModule.dial(calleeUserId, isVideoCall, options);\n  }\n\n  /**\n   * Creates a {@link Room} for group calls.\n   *\n   * @since 1.0.0\n   */\n  public createRoom(roomParams: RoomParams): Promise<Room> {\n    return this.binder.nativeModule.createRoom(roomParams).then((props) => Room.get(this.binder, props));\n  }\n\n  /**\n   * Fetches a room instance from Sendbird server.\n   *\n   * @since 1.0.0\n   */\n  public fetchRoomById(roomId: string): Promise<Room> {\n    return this.binder.nativeModule.fetchRoomById(roomId).then((props) => Room.get(this.binder, props));\n  }\n\n  /**\n   * Gets a locally-cached room instance by room ID.\n   *\n   * @since 1.0.0\n   */\n  public getCachedRoomById(roomId: string): Promise<Room | null> {\n    return this.binder.nativeModule\n      .getCachedRoomById(roomId)\n      .then((props) => (props ? Room.get(this.binder, props) : null));\n  }\n\n  /**\n   * To receive native-like calls while an app is in the background or closed, a device registration token must be registered to the server.\n   * Register a device push token after authentication has completed using the `SendbirdCalls.ios_registerVoIPPushToken()` method.\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  public ios_registerVoIPPushToken = async (token: string, unique = true) => {\n    if (Platform.OS !== 'ios') return;\n    await this.binder.nativeModule.registerVoIPPushToken(token, unique);\n  };\n\n  /**\n   * Unregisters a VoIP push token of specific device.\n   * You will not receive VoIP push notification for a call anymore.\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  public ios_unregisterVoIPPushToken = async (token: string) => {\n    if (Platform.OS !== 'ios') return;\n    await this.binder.nativeModule.unregisterVoIPPushToken(token);\n  };\n\n  /**\n   * Show-up a view that allows user to change the system audio route.\n   * [AVRoutePickerView](https://developer.apple.com/documentation/avkit/avroutepickerview) in iOS 11 or later\n   *\n   * @platform iOS\n   * @since 1.0.0\n   */\n  public ios_routePickerView = () => {\n    if (Platform.OS !== 'ios') return;\n    this.binder.nativeModule.routePickerView();\n  };\n\n  /**\n   * Handles Firebase message data.\n   * Returns true if Sendbird call message. Otherwise false.\n   *\n   * @platform Android\n   * @since 1.0.0\n   */\n  public android_handleFirebaseMessageData = (data?: Record<string, string>) => {\n    if (Platform.OS !== 'android' || !data?.['sendbird_call']) {\n      return false;\n    } else {\n      this.binder.nativeModule.handleFirebaseMessageData(data);\n      return true;\n    }\n  };\n\n  /**\n   * Set SendbirdCall listener\n   *\n   * @since 1.0.0\n   */\n  setListener(listener: SendbirdCallListener): void {\n    this.Logger.info('[SendbirdCalls]', 'setListener');\n    this._sendbirdCallListener = listener;\n  }\n\n  /**\n   * Creates direct call log list query.\n   *\n   * @since 1.0.0\n   */\n  public createDirectCallLogListQuery = async (params: DirectCallLogQueryParams = {}) => {\n    const queryKey = await this.binder.nativeModule.createDirectCallLogListQuery(params);\n    return new DirectCallLogListQuery(queryKey, NativeQueryType.DIRECT_CALL_LOG, this.binder);\n  };\n\n  /**\n   * Creates a query for room list with specified parameters.\n   *\n   * @since 1.0.0\n   */\n  public createRoomListQuery = async (params: RoomListQueryParams = {}) => {\n    const queryKey = await this.binder.nativeModule.createRoomListQuery(params);\n    return new RoomListQuery(queryKey, NativeQueryType.ROOM_LIST, this.binder);\n  };\n}\n"]}